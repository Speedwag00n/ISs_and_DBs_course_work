CREATE OR REPLACE FUNCTION CHECK_USER_OF_SERVICE_AND_REQUEST()
    RETURNS TRIGGER AS
$$
DECLARE
    USER_SER  INT := (SELECT user_id
                      FROM service
                      WHERE ID = NEW.service);
    USER_REQ INT := (SELECT AUTHOR
                     FROM request
                     WHERE ID = NEW.request);
BEGIN
    IF USER_SER != USER_REQ THEN
        RETURN NULL;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER CHECK_USER_OF_SERVICE_AND_REQUEST
    BEFORE INSERT
    ON SERVICE_OFFER_REQUEST
    FOR EACH ROW
EXECUTE PROCEDURE CHECK_USER_OF_SERVICE_AND_REQUEST();

CREATE OR REPLACE FUNCTION CHECK_USER_OF_OBJECT_AND_REQUEST()
    RETURNS TRIGGER AS
$$
DECLARE
    USER_OBJ  INT := (SELECT user_id
                              FROM OBJECT
                              WHERE ID = NEW.OBJECT);
    USER_REQ INT := (SELECT AUTHOR
                        FROM request
                        WHERE ID = NEW.request);
BEGIN
    IF USER_OBJ != USER_REQ THEN
        RETURN NULL;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER CHECK_USER_OF_OBJECT_AND_REQUEST
    BEFORE INSERT
    ON OBJECT_OFFER_REQUEST
    FOR EACH ROW
EXECUTE PROCEDURE CHECK_USER_OF_OBJECT_AND_REQUEST();

CREATE OR REPLACE FUNCTION CHECK_OBJECT_OFFER_STATUS()
    RETURNS TRIGGER AS
$$
DECLARE
    STATE  "OBJECT_STATE" := (SELECT OBJECT_STATE
                       FROM OBJECT
                       WHERE ID = NEW.OBJECT);
    STATUS "STATUS" := (SELECT STATUS
                       FROM OFFER
                       WHERE ID = NEW.OFFER);
BEGIN
    IF STATE = 'SHARED' OR STATUS != 'OPEN' THEN
        RETURN NULL;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER CHECK_OBJECT_OFFER_STATUS
    BEFORE INSERT
    ON OBJECT_OFFER_REQUEST
    FOR EACH ROW
EXECUTE PROCEDURE CHECK_OBJECT_OFFER_STATUS();

CREATE OR REPLACE FUNCTION CHECK_SERVICE_OFFER_STATUS()
    RETURNS TRIGGER AS
$$
DECLARE
    STATUS "STATUS" := (SELECT STATUS
                       FROM OFFER
                       WHERE ID = NEW.OFFER);
BEGIN
    IF STATUS != 'OPEN' THEN
        RETURN NULL;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER CHECK_SERVICE_OFFER_STATUS
    BEFORE INSERT
    ON SERVICE_OFFER_REQUEST
    FOR EACH ROW
EXECUTE PROCEDURE CHECK_SERVICE_OFFER_STATUS();

CREATE OR REPLACE FUNCTION CHECK_SUGGESTION_STATUS()
    RETURNS TRIGGER AS
$$
DECLARE
    STATUS "STATUS" := (SELECT STATUS
                       FROM SUGGESTION
                       WHERE ID = NEW.SUGGESTION);
BEGIN
    IF STATUS != 'OPEN' THEN
        RETURN NULL;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER CHECK_SUGGESTION_STATUS
    BEFORE INSERT
    ON SUGGESTION_REQUEST
    FOR EACH ROW
EXECUTE PROCEDURE CHECK_SUGGESTION_STATUS();

CREATE OR REPLACE FUNCTION CHECK_DORMITORY_FOR_SUGGESTION()
    RETURNS TRIGGER AS
$$
DECLARE
    REQUEST_AUTHOR       INTEGER := (SELECT AUTHOR
                                     FROM REQUEST
                                     WHERE ID = NEW.REQUEST);
    SUGGESTION_AUTHOR    INTEGER := (SELECT AUTHOR
                                     FROM SUGGESTION
                                     WHERE ID = NEW.SUGGESTION);
    REQUEST_DORMITORY    INTEGER := (SELECT DORMITORY
                                     FROM USERS
                                     WHERE ID = REQUEST_AUTHOR);
    SUGGESTION_DORMITORY INTEGER := (SELECT DORMITORY
                                     FROM USERS
                                     WHERE ID = SUGGESTION_AUTHOR);
BEGIN
    IF REQUEST_DORMITORY != SUGGESTION_DORMITORY THEN
        RETURN NULL;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER CHECK_DORMITORY_FOR_SUGGESTION
    BEFORE INSERT
    ON SUGGESTION_REQUEST
    FOR EACH ROW
EXECUTE PROCEDURE CHECK_DORMITORY_FOR_SUGGESTION();

CREATE OR REPLACE FUNCTION CHECK_DORMITORY_FOR_SERVICE_OFFER()
    RETURNS TRIGGER AS
$$
DECLARE
    REQUEST_AUTHOR    INTEGER := (SELECT AUTHOR
                                  FROM REQUEST
                                  WHERE ID = NEW.REQUEST);
    OFFER_AUTHOR      INTEGER := (SELECT AUTHOR
                                  FROM OFFER
                                  WHERE ID = NEW.OFFER);
    REQUEST_DORMITORY INTEGER := (SELECT DORMITORY
                                  FROM USERS
                                  WHERE ID = REQUEST_AUTHOR);
    OFFER_DORMITORY   INTEGER := (SELECT DORMITORY
                                  FROM USERS
                                  WHERE ID = OFFER_AUTHOR);
BEGIN
    IF REQUEST_DORMITORY != OFFER_DORMITORY THEN
        RETURN NULL;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER CHECK_DORMITORY_FOR_SERVICE_OFFER
    BEFORE INSERT
    ON SERVICE_OFFER_REQUEST
    FOR EACH ROW
EXECUTE PROCEDURE CHECK_DORMITORY_FOR_SERVICE_OFFER();

CREATE OR REPLACE FUNCTION CHECK_DORMITORY_FOR_OBJECT_OFFER()
    RETURNS TRIGGER AS
$$
DECLARE
    REQUEST_AUTHOR    INTEGER := (SELECT AUTHOR
                                  FROM REQUEST
                                  WHERE ID = NEW.REQUEST);
    OFFER_AUTHOR      INTEGER := (SELECT AUTHOR
                                  FROM OFFER
                                  WHERE ID = NEW.OFFER);
    REQUEST_DORMITORY INTEGER := (SELECT DORMITORY
                                  FROM USERS
                                  WHERE ID = REQUEST_AUTHOR);
    OFFER_DORMITORY   INTEGER := (SELECT DORMITORY
                                  FROM USERS
                                  WHERE ID = OFFER_AUTHOR);
BEGIN
    IF REQUEST_DORMITORY != OFFER_DORMITORY THEN
        RETURN NULL;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER CHECK_DORMITORY_FOR_OBJECT_OFFER
    BEFORE INSERT
    ON OBJECT_OFFER_REQUEST
    FOR EACH ROW
EXECUTE PROCEDURE CHECK_DORMITORY_FOR_OBJECT_OFFER();



CREATE OR REPLACE FUNCTION AFTER_DROP_SPECIFIC_OFFER_REQUEST()
    RETURNS TRIGGER AS
$$
DECLARE
    REQUEST_ID INTEGER := (SELECT ID
                        FROM REQUEST
                        WHERE ID = OLD.REQUEST);
BEGIN
    DELETE FROM REQUEST WHERE ID = REQUEST_ID;
    RETURN OLD;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER AFTER_DROP_OBJECT_OFFER_REQUEST
    BEFORE DELETE
    ON OBJECT_OFFER_REQUEST
    FOR EACH ROW
EXECUTE PROCEDURE AFTER_DROP_SPECIFIC_OFFER_REQUEST();

CREATE TRIGGER AFTER_DROP_SERVICE_OFFER_REQUEST
    BEFORE DELETE
    ON SERVICE_OFFER_REQUEST
    FOR EACH ROW
EXECUTE PROCEDURE AFTER_DROP_SPECIFIC_OFFER_REQUEST();



CREATE OR REPLACE FUNCTION AFTER_DROP_SPECIFIC_COMMENT()
    RETURNS TRIGGER AS
$$
DECLARE
    COMMENT_ID INTEGER := (SELECT ID
                        FROM COMMENT
                        WHERE ID = OLD.COMMENT);
BEGIN
    DELETE FROM COMMENT WHERE ID = COMMENT_ID;
    RETURN OLD;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER AFTER_DROP_SUGGESTION_COMMENT
    BEFORE DELETE
    ON SUGGESTION_COMMENT
    FOR EACH ROW
EXECUTE PROCEDURE AFTER_DROP_SPECIFIC_COMMENT();

CREATE TRIGGER AFTER_DROP_OFFER_COMMENT
    BEFORE DELETE
    ON OFFER_COMMENT
    FOR EACH ROW
EXECUTE PROCEDURE AFTER_DROP_SPECIFIC_COMMENT();



CREATE OR REPLACE FUNCTION AFTER_DROP_SPECIFIC_SUGGESTION()
    RETURNS TRIGGER AS
$$
DECLARE
    SUGGESTION_ID INTEGER := (SELECT ID
                           FROM SUGGESTION
                           WHERE ID = OLD.SUGGESTION);
BEGIN
    DELETE FROM SUGGESTION WHERE ID = SUGGESTION_ID;
    RETURN OLD;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER AFTER_DROP_OBJECT_SUGGESTION
    BEFORE DELETE
    ON OBJECT_SUGGESTION
    FOR EACH ROW
EXECUTE PROCEDURE AFTER_DROP_SPECIFIC_SUGGESTION();

CREATE TRIGGER AFTER_DROP_SERVICE_SUGGESTION
    BEFORE DELETE
    ON SERVICE_SUGGESTION
    FOR EACH ROW
EXECUTE PROCEDURE AFTER_DROP_SPECIFIC_SUGGESTION();



CREATE OR REPLACE FUNCTION AFTER_DROP_SUGGESTION_REQUEST()
    RETURNS TRIGGER AS
$$
DECLARE
    REQUEST_ID INTEGER := (SELECT ID
                        FROM REQUEST
                        WHERE ID = OLD.REQUEST);
BEGIN
    DELETE FROM REQUEST WHERE ID = REQUEST_ID;
    RETURN OLD;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER AFTER_DROP_SUGGESTION_REQUEST
    BEFORE DELETE
    ON SUGGESTION_REQUEST
    FOR EACH ROW
EXECUTE PROCEDURE AFTER_DROP_SUGGESTION_REQUEST();