CREATE OR REPLACE FUNCTION INSERT_OBJECT_SUGGESTION(NAME_SUGGESTION VARCHAR(32),
                                                    DESCRIPTION_SUGGESTION VARCHAR(256),
                                                    NAME_OBJECT VARCHAR(32),
                                                    DESCRIPTION_OBJECT VARCHAR(256),
                                                    AUTHOR INTEGER)
    RETURNS VOID AS
$$
DECLARE
    OBJECT_ID     INT;
    SUGGESTION_ID INT;
BEGIN
    INSERT INTO OBJECT (NAME, DESCRIPTION, USER_ID)
    VALUES (NAME_OBJECT, DESCRIPTION_OBJECT, AUTHOR)
    RETURNING id INTO OBJECT_ID;
    INSERT INTO SUGGESTION (NAME, DESCRIPTION, CREATION_DATE, AUTHOR)
    VALUES (NAME_SUGGESTION, DESCRIPTION_SUGGESTION, CURRENT_TIMESTAMP, AUTHOR)
    RETURNING id INTO SUGGESTION_ID;
    INSERT INTO OBJECT_SUGGESTION (SUGGESTION, OBJECT)
    VALUES (SUGGESTION_ID, OBJECT_ID);
END;
$$ LANGUAGE PLPGSQL;



CREATE OR REPLACE FUNCTION GET_OFFERS_IN_DORMITORY(DORMITORY_ID INTEGER)
    RETURNS TABLE(
    ID INTEGER,
    NAME VARCHAR(32),
    DESCRIPTION VARCHAR(256),
    STATUS "STATUS",
    CREATION_DATE TIMESTAMP WITH TIME ZONE,
    AUTHOR INTEGER) AS
$$
BEGIN
    RETURN QUERY SELECT 
    OFFER.ID, OFFER.NAME, OFFER.DESCRIPTION, OFFER.STATUS, OFFER.CREATION_DATE, OFFER.AUTHOR
    FROM "USER"
	JOIN DORMITORY ON "USER".DORMITORY = DORMITORY.ID
	JOIN OFFER ON OFFER.AUTHOR = "USER".ID WHERE DORMITORY.ID = DORMITORY_ID;
END;
$$ LANGUAGE PLPGSQL;



CREATE OR REPLACE FUNCTION GET_SERVICE_SUGGESTIONS_IN_DORMITORY(DORMITORY_ID INTEGER)
    RETURNS TABLE(
    SUGGESTION_ID INTEGER,
    SUGGESTION_NAME VARCHAR(32),
    SUGGESTION_DESCRIPTION VARCHAR(256),
    STATUS "STATUS",
    CREATION_DATE TIMESTAMP WITH TIME ZONE,
    AUTHOR INTEGER,
    SERVICE_ID INTEGER,
	SERVICE_NAME VARCHAR(32),
    SERVICE_DESCRIPTION VARCHAR(256)) AS
$$
BEGIN
    RETURN QUERY SELECT 
    SUGGESTION.ID as SUGGESTION_ID, SUGGESTION.NAME as SUGGESTION_NAME, SUGGESTION.DESCRIPTION as SUGGESTION_DESCRIPTION, SUGGESTION.STATUS, SUGGESTION.CREATION_DATE, 
	SUGGESTION.AUTHOR, SERVICE.ID as SERVICE_ID, SERVICE.NAME as SERVICE_NAME, SERVICE.DESCRIPTION as SERVICE_DESCRIPTION
    FROM "USER"
	JOIN DORMITORY ON "USER".DORMITORY = DORMITORY.ID
	JOIN SUGGESTION ON SUGGESTION.AUTHOR = "USER".ID
	JOIN SERVICE_SUGGESTION ON SERVICE_SUGGESTION.SUGGESTION = SUGGESTION.ID
	JOIN SERVICE ON SERVICE_SUGGESTION.SERVICE = SERVICE.ID WHERE DORMITORY.ID = DORMITORY_ID;
END;
$$ LANGUAGE PLPGSQL;



CREATE OR REPLACE FUNCTION GET_OBJECT_SUGGESTIONS_IN_DORMITORY(DORMITORY_ID INTEGER)
    RETURNS TABLE(
    SUGGESTION_ID INTEGER,
    SUGGESTION_NAME VARCHAR(32),
    SUGGESTION_DESCRIPTION VARCHAR(256),
    STATUS "STATUS",
    CREATION_DATE TIMESTAMP WITH TIME ZONE,
    AUTHOR INTEGER,
    OBJECT_ID INTEGER,
	OBJECT_NAME VARCHAR(32),
    OBJECT_DESCRIPTION VARCHAR(256),
	OBJECT_STATE "OBJECT_STATE") AS
$$
BEGIN
    RETURN QUERY SELECT 
    SUGGESTION.ID as SUGGESTION_ID, SUGGESTION.NAME as SUGGESTION_NAME, SUGGESTION.DESCRIPTION as SUGGESTION_DESCRIPTION, SUGGESTION.STATUS, SUGGESTION.CREATION_DATE, 
	SUGGESTION.AUTHOR, OBJECT.ID as OBJECT_ID, OBJECT.NAME as OBJECT_NAME, OBJECT.DESCRIPTION as OBJECT_DESCRIPTION, OBJECT.OBJECT_STATE as OBJECT_STATE
    FROM "USER"
	JOIN DORMITORY ON "USER".DORMITORY = DORMITORY.ID
	JOIN SUGGESTION ON SUGGESTION.AUTHOR = "USER".ID
	JOIN OBJECT_SUGGESTION ON OBJECT_SUGGESTION.SUGGESTION = SUGGESTION.ID
	JOIN OBJECT ON OBJECT_SUGGESTION.OBJECT = OBJECT.ID WHERE DORMITORY.ID = DORMITORY_ID;
END;
$$ LANGUAGE PLPGSQL;